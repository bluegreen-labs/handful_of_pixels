# Land-Cover classification {#sec-land-cover}

In previous sections I've explained how seasonality in vegetation canopy density (leaf area inxed, or LAI) or phenology can be detected, and how it varies depending on the geography of the region, and its ties to the exchange of carbon (C) and water between the biosphere and the atmosphere (@sec-phenology-trends). A small, first principles, example was provided on how to write your own phenology detection algorithm (@sec-algorithms).

However, many satellite platforms provide information in various spectral bands (and not only one product in the temporal domain). One can say the data are multi-dimensional, having both a temporal, spatial and spectral component (see @fig-spectral-bands). These various bands, or locations in the spectral domain, provide key insights into the state of the land surface (throughout the year).

For example the combination of information in the red and near-infrared bands (spectral domains) provides key information to calculate the Normalized Difference Vegetation Index (NDVI) [@Huete2002]. Other band combinations and or models lead to other indices with varying properties, tailored to specific ecological, geo-morphological or other purposes [@zeng_optical_2022].

When we plot a time series of a deciduous forest you note the steady seasonal changes when switching between winter, with low LAI values, and summer with high LAI values. However, different vegetation and land cover types have different temporal NDVI signals. For example, a glacier will have permanent snow and no seasonal LAI signal. We can therefore discriminate between non-vegetative locations and vegetation based upon the combine spectral and temporal profile of a location.

```{r include=FALSE}
library(terra)
library(dplyr)
library(ggplot2)
library(patchwork)
library(MODISTools)

# read land cover map
lc <- readRDS(here::here("data/land-cover_2012.rds")) 

# export a raster version for plotting
lc_r <- lc |> mt_to_terra(reproject = TRUE)

# lc <- lc |>
#   mutate(
#     date = as.Date(calendar_date),
#     year = as.numeric(format(date, "%Y")) 
#   ) |>
#   rename(
#     lc = "value"
#   ) |>
#   select(
#     pixel,
#     year,
#     lc
#   )
# 
# # read in LAI
# lai <- readRDS(here::here("data/lai_2012.rds")) |>
#   mutate(
#     date = as.Date(calendar_date),
#     year = as.numeric(format(date, "%Y")),
#     value = value * as.numeric(scale)
#   ) |>
#   rename(
#     lai = "value"
#   ) |>
#   select(
#     pixel,
#     date,
#     year,
#     lai
#   )
# 
# # merge by pixel and date
# df <- left_join(lai, lc, by = c("pixel", "year"))
# 
# # get mean and sd for dbf locations
# dbf <- df |> 
#   filter(lc == 4) |> 
#   group_by(date) |> 
#   summarize(
#     mean = mean(lai),
#     sd = sd(lai)
#     )
# 
# saveRDS(
#   dbf,
#   here::here("data/dbf_lai_profile.rds"),
#   compress = "xz"
#   )
# 
# # get mean and sd for barren locations
# snow <- df |> 
#   filter(lc == 15) |> 
#   group_by(date) |> 
#   summarize(
#     mean = mean(lai),
#     sd = sd(lai)
#     )
# 
# saveRDS(
#   snow,
#   here::here("data/snow_lai_profile.rds"),
#   compress = "xz"
#   )

snow <- readRDS(here::here("data/snow_lai_profile.rds"))
dbf <- readRDS(here::here("data/dbf_lai_profile.rds"))
```


```{r}
#| label: fig-lai-dbf-snow
#| fig-cap: "The 8-daily mean and standard deviation of the leaf area index (LAI) over all broadleaf forests (a) and permanent snow/ice areas (b) within the Swiss LAI dataset, as previously used."
#| fig-align: "center"
#| out-width: "100%"
#| fig-height: 3
#| echo: FALSE

p <- ggplot(dbf) +
  geom_ribbon(
    aes(
      date,
      ymin = mean - sd,
      ymax = mean + sd
    ),
    fill = "grey"
  ) +
  geom_line(
    aes(
      date,
      mean
    )
  ) +
  labs(
    x = "",
    y = "LAI"
  ) +
  theme_bw()

p2 <- ggplot(snow) +
  geom_ribbon(
    aes(
      date,
      ymin = mean - sd,
      ymax = mean + sd
    ),
    fill = "grey"
  ) +
  geom_line(
    aes(
      date,
      mean
    )
  ) +
    labs(
    x = "",
    y = "LAI"
  ) +
  theme_bw()

p + p2 +  
  plot_layout(nrow = 1) + 
  plot_annotation(
    tag_levels = "a",
    tag_prefix = "(",
    tag_suffix = ")"
    )
```

## Unsupervised machine learning

As such, we can use this (temporal) information across vegetation types to classify the Swiss alpine scene into locations which have little seasonality and those which have some (e.g. @fig-lai-dbf-snow). For example you can calculate the mean and standard deviation of a full year and see how much variability you see across a year. Regions with a low NDVI signal with little variability are most likely not associated with vegetation (e.g. glaciers, see @fig-lai-dbf-snow).

Classification of data in different classes (or clustering) can be accomplished using various methods. Clustering can either be unsupervised, where clustering is only defined by the number of classes one wants to divide the (multi-dimensional) dataset into.

We can use an unsupervised machine learning approach such as k-means clustering to divide the dataset into two or more classes. These classes are clustered in a way which minimizes within-cluster variances, i.e. it ensures that pixels will look similar to eachother (given a target number of clusters `k` to divide the dataset into).

```{r include=FALSE}
# load buffered data, not shown in render
r <- terra::rast(here::here("data/LAI.tiff"))
```

Here we can use the `lai_2012` dataset we previously downloaded, but we'll use the raster representation as a starting point (as most data will come in multi-layer raster formats).

```{r eval = FALSE}
# conversion from tidy data to a raster format
# as it is common to use raster data
r <- MODISTools::mt_to_terra(
  lai_2012,
  reproject = TRUE
  )
```

As a first step I will convert this raster object back into a dataframe. However, this time it will be a wide data frame, where every pixel location is a row and every column a value for a given date. Alternatively, I could have converted the original `lai_2012` data frame from a long format into a wide format using `tidyr::pivot_wider()`. Every row, representing a year for a given location, is a [feature (vector)](https://en.wikipedia.org/wiki/Feature_(machine_learning)) which contains the information on which the clustering algorithm will operate.

```{r}
# convert a multi-layer raster image
# to wide dataframe
df <- as.data.frame(r, cell = TRUE)

# the content of a single feature (vector)
# limited to the first 5 values for brevity
print(df[1,1:5])
```

We can now use the `kmeans()` algorithm to classify the data into two distinct groups or centers (k = 2). Note that we drop the first column from our dataframe as this contains the pixel indices, which are needed later on.

```{r}
# cluster the data 
clusters <- kmeans(
  df[,-1],
  centers = 2
)

# use the original raster layout as
# a template for the new map (only
# using a single layer)
r_clusters <- rast(r, nlyr=1)

# assign to each cell value (location) of this
# new map using the previously exported cell
# values (NA values are omitted so a 1:1
# mapping would not work)
r_clusters[df$cell] <- clusters$cluster
```

```{r warning = FALSE,  message = FALSE}
#| code-fold: true
#| label: fig-kmeans-map
#| fig-cap: "k-means classification map for two clusters and one year (2012) of leaf area index (LAI) data."
#| fig-align: "center"
#| out-width: "100%"

library(leaflet)

# set te colour scale manually
bin <- colorFactor(
  c("#000000", "#FFFFFF"),
  domain = unique(values(r_clusters)),
  na.color = "transparent"
  )

# build the leaflet map
leaflet() |> 
  addProviderTiles(providers$Esri.WorldImagery, group = "World Imagery") |>
  addProviderTiles(providers$Esri.WorldTopoMap, group = "World Topo") |>
  addRasterImage(
    r_clusters,
    colors = bin,
    opacity = 0.5,
    group = "k-means cluster results"
    ) |>
  addLayersControl(
    baseGroups = c("World Imagery","World Topo"),
    position = "topleft",
    options = layersControlOptions(collapsed = FALSE),
    overlayGroups = c("k-means cluster results")
    ) |>
  addLegend(
    pal = bin,
    values = c(1, 2),
    title = "cluster"
    )
```

As this is an unsupervised classification we do not know what land cover types are included in this map. However, a quick visual inspection shows that zone 2 predominantly includes glaciers, water bodies, and urban areas (@fig-kmeans-map). The (seasonal) differences in LAI were used in the k-means analysis to minimize the (seasonal) variance between pixels. In particular, our analysis with two classes separates areas with a seasonal dynamic from those without one.

Note that kmeans clustering provides a clustered output and not a model which can be scaled to other locations. The representation of k-means clustering is therefore dependent on the dataset. Furthermore, a simple index as an NDVI or LAI alone does not provide sufficient information to distinguish between more subtle vegetation or land-cover classes (e.g. evergreen forests and or mixed forest types). In short, we need more data and a more sophisticated model driven approach to create an informed model which scales easily to different land cover types.
