# Phenology trends {#sec-phenology-trends}

## Introduction

Land surface phenology is a first order control on the exchange of water and energy between the biosphere and atmosphere. ...  As such it is an indicator of climate change. Plant phenology has historically been recorded for many centuries. More recently plant phenology (and its changes) have been recorded by networks of observers, near-surface cameras and not in the least by global satellite monitoring.

All these (remote sensing) measurements have provided us with insights in how climate change has altered plant phenology. Overall, climate change moves phenology forward (from spring toward winter) at a rate of 3 days/decade, with rates varying depending on locality and altitude.

Consequences are many, such as exposing early blooming or leafing plants to increased frosts risks and carbon losses through an explicit opportunity cost. In short, changes to plant and land surface phenology have a profound effect on both the carbon balance and all (co-) dependent processes. Therefore, it is key that we can quantify how phenology changes in response to year-to-year variability and climate change and global heating.

Remote sensing products provide these insights for almost four decades. Remote sensing, and land surface phenology  products they produce have a number of advantages. They provide wall-to-wall coverage, with relative consistency and known (methodological) biases. In this and the following @sec-algorithms I will cover several aspects of developing a small research project using the remote sensing of phenology as it's basis.

Let's get started!

```{r include = FALSE}
library(geodata)
library(terra)
library(dplyr)
library(ggplot2)
library(patchwork)
library(hexbin)

# preloading data
# for fast processing
phenology <- readRDS(here::here("data/phenology_2012.rds"))
dem <- terra::rast(here::here("data-raw/srtm_38_03.tif"))
land_cover <- readRDS(here::here("data/land-cover_2012.rds"))
```

## Getting the required data

We want to download topographic data to quantify the influence of topography on phenology. Various sources can be found online but the easiest is to use the geodata package which provides a way to access Shuttle Radar Topography Mission (SRTM) elevation data easily.

```{r eval = FALSE}
# load libraries
library(geodata)

# download SRTM data
geodata::elevation_3s(
    lat = 46.6756,
    lon = 7.85480,
    path = here::here("data-raw/")
  )
```


::: callout-note
### Note

You can use the `here` package to make references to paths consistent within an R project. When wrapping a path with `here::here()` you reference the file relative to the main project directory, not the current directory. This is especially helpful when using R markdown or other notebook formats such as Quarto. These notebooks render code relative to their current location (path). Notebooks in sub-directories in a project will therefore not be able to easily access data in other sub-directories. The `here` package resolves this issue.
:::

In this exercise we'll rely on the MODIS land surface phenology product. This remote sensing based data product quantifies land surface phenology and is a good trade-off between data coverage (global) and precision (on a landscape scale).

To gather this data we will use the `MODISTools` package. For an in depth discussion on gathering data using APIs and this API in particular I refer to @sec-accessing-data.

```{r eval = FALSE}
# load libraries
library(MODISTools)

# download and save phenology data
phenology <- MODISTools::mt_subset(
  product = "MCD12Q2",
  lat = 46.6756,
  lon = 7.85480,
  band = "Greenup.Num_Modes_01",
  start = "2012-01-01",
  end = "2012-12-31",
  km_lr = 100,
  km_ab = 100,
  site_name = "swiss",
  internal = TRUE,
  progress = FALSE
)
```

::: callout-tip
### Exercise: know what you use / download
Find information on who produced the product, track down the latest literature in this respect and note what the limitations of the product are.

- What does the band name stand for (mathematically)? 
- How does this relate to other bands within this product?
- What are the characteristics of the downloaded data?
  - is post-processing required?

Write down all these aspects into any report (or code) you create to insure reproducibility.
:::

The downloaded phenology data and the topography data need post-processing in our analysis. There are a number of reasons for this:

1. MODIS data comes as a tidy data frame
2. MODIS data might have missing values
3. DEM data extent is larger than MODIS coverage
4. Two non-matching grids (DEM ~ MODIS)

Given that data downloaded using `MODISTools` is formatted as tidy data we can change corrupt or missing values into a consistent format. In the case of the MCD12Q2 product all values larger than 32665 can be classified as `NA` (not available).

The documentation of the product also shows that phenology metrics are dates as days counted from January 1st 1970. In order to ease interpretation we will convert these integer values, counted from 1970, to day-of-year values (using `as.Date()` and `format()`). We only consider phenological events in the first 200 days of the year, as we focus on spring. Later dates are most likely spurious.

```{r eval = TRUE}
# screening of data
phenology <- phenology |>
  mutate(
    value = ifelse(value > 32656, NA, value),
    value = as.numeric(format(as.Date("1970-01-01") + value, "%j")),
    value = ifelse (value < 200, value, NA)
  )
```

Both datasets, the DEM and MODIS data, come in two different data formats. For the ease of computation we convert the tidy data to a geospatial (`terra` SpatRast) format.

```{r eval = TRUE}
phenology_raster <- MODISTools::mt_to_terra(
  phenology,
  reproject = TRUE
)
```
```{r message = FALSE, warning=FALSE}
#| code-fold: true
#| label: fig-phenology-modis
#| fig-cap: "MODIS land surface phenology (as DOY for 2012)"
#| fig-align: "center"
#| out-width: "100%"
#| fig-width: 5
#| fig-height: 3

ggplot() +
  tidyterra::geom_spatraster(data = phenology_raster) +
  scale_fill_viridis_c(
    na.value = NA,
    name = "DOY"
    ) +
  theme_bw()

```

We can now compare both data sets in a spatially explicit way, e.g. compute overlap, reproject or resample data. For example, to limit computational time it is often wise to restrict the region of interest to an overlapping section between both data sets. This allows data to be as large as required but as small as possible. We therefore crop the DEM data to correspond to the size of the coverage of the MODIS phenology data.

```{r eval = FALSE}
# crop the dem
dem <- terra::crop(
  x = dem,
  y = phenology_raster
)
```

The grid of the DEM and MODIS data do not align and so resampling of the data is required. We use the highest resolution data for this resampling, taking the average across the extent of a MODIS pixel.

```{r eval = TRUE}
# resample the dem using
# the mean DEM value in a
# MODIS pixel
dem <- terra::resample(
  x = dem,
  y = phenology_raster,
  method = "average"
)

# mask the locations which
# have no data
dem <- terra::mask(
  dem,
  is.na(phenology_raster),
  maskvalues = TRUE
)

```

To provide some context to our results it might be useful to look at different responses by land cover class. In addition to phenology data we can therefore also download the MODIS land cover data product for 2012.

```{r eval = FALSE}
# download and save land cover data
land_cover <- MODISTools::mt_subset(
  product = "MCD12Q1",
  lat = 46.6756,
  lon = 7.85480,
  band = "LC_Type1",
  start = "2012-01-01",
  end = "2012-12-31",
  km_lr = 100,
  km_ab = 100,
  site_name = "swiss",
  internal = TRUE,
  progress = FALSE
)
```

Now convert this data to geospatial format as before.

```{r}
land_cover_raster <- MODISTools::mt_to_terra(
  land_cover,
  reproject = TRUE
)
```

## Phenology trends

With all data processed we can explore some of the trends in phenology in relation to topography. Plotting the data side by side already provides some insight into expected trends.

```{r warning = FALSE}
#| code-fold: true
#| label: fig-phenology-dem
#| fig-cap: "Panel plot showing both the Digital Elevation Model data (a) and the MODIS phenology data (b)."
#| fig-align: "center"
#| out-width: "100%"
#| fig-width: 5
#| fig-height: 6

p <- ggplot() +
  tidyterra::geom_spatraster(data = dem) +
  scale_fill_viridis_c(
    na.value = NA,
    name = "altitude (m)"
    ) +
  theme_bw()

p2 <- ggplot() +
  tidyterra::geom_spatraster(data = phenology_raster) +
  scale_fill_viridis_c(
    na.value = NA,
    name = "DOY"
    ) +
  theme_bw()

# compositing
p + p2 + 
  plot_layout(ncol = 1) + 
  plot_annotation(
    tag_levels = "a",
    tag_prefix = "(",
    tag_suffix = ")"
    )
```

We can plot the relation between topography and the start of the season (phenology) across the scene (where data is available). Plotting this non-spatially will show a clear relation between topography (altitude) and the start of the season. With an increasing altitude we see the start of the season being delayed. The effect is mild below 1000m and increases above this.

```{r warning = FALSE, message= FALSE}
#| code-fold: true
#| label: fig-dem-phenology-scatterplot
#| fig-cap: "Scatterplot of MODIS phenology values (as day-of-year, DOY) in function of  altitude (m). The white dashed line is a linear regression fit to all available data."
#| fig-align: "center"
#| out-width: "100%"
#| fig-width: 5
#| fig-height: 3

# convert to data frame and merge
dem_df <- as.vector(dem)
phenology_df <- as.vector(phenology_raster)
sct_df <- data.frame(
  altitude = dem_df,
  doy = phenology_df
  )

ggplot(
  data = sct_df,
      aes(
      altitude,
      doy
    )
  ) +
  geom_hex() +
  scale_fill_viridis_c() +
  geom_smooth(
    method = "lm",
    se = FALSE,
    colour = "white",
    lty = 2
  ) +
  labs(
    x = "altitude (m)",
    y = "MODIS vegetation greenup (DOY)"
  ) +
  theme_bw()

```

::: {.callout-note collapse=true}

### Note 

The fit linear regression above has the following parameters.

```{r label="stats-rate-of-change"}
# fit a linear regression to the data of the figure above
# (for the pre-processing see the collapsed code of the figure)
fit <- lm(doy ~ altitude, data = sct_df)
print(summary(fit))
```
:::

::: {.callout-tip}
### Exercise

Interpret the results of the above fit model (see full model results in the collapsed note above).

- What does the intercept indicate?
- How can you interpret the slope?
- Convert the established relationship with altitude, to one with temperature
  - How would you go about this?

:::