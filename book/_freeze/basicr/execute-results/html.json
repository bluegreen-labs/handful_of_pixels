{
  "hash": "ac2dcf334c8c5754c8042e9f8f06228b",
  "result": {
    "markdown": "---\nengine: knitr\nfilters:\n  - webr\n---\n\n\n# Crash course R\n\nThis chapter will briefly summarize some of the principles which will be used throughout the book. In particular, I outline some of the best practices in managing projects and the basic data manipulations using the tidy data principles. For a thourough introduction to data science in R I refer to [R for data science](https://r4ds.had.co.nz/) by Hadley & Grolemund, while open data science practices and reproducible project management I refer to [Reproducibility with R](https://eliocamp.github.io/reproducibility-with-r/) by Campitelli & Corrales. For an in depth discussion of geocomputational concepts I refer to [Geocomputation with R](https://r.geocompx.org/index.html) by Lovelace, Nowosad, Muenchow.\n\n## Project management\n\nFrom a very practical and pragmatic point of view a solid workflow requires reproducible results. The smallest unit in a reproducible workflow is the structure of your personal research project (irrespective of its contributions to a larger whole). **Structuring** a research project.\n\nStructuring your project covers:\n\n- the **organization of your files** (i.e. code, data, manuscripts)\n- file **naming** conventions (how things are named)\n- code documentation (describing what and how you do things)\n- data documentation (describing data sources)\n- version control (logging progress systematically)\n\nWhen using R the easiest solution to many of these issues is to use an Integrated Development Environment (IDE, e.g. [RStudio](https://posit.co/downloads/) or [VS Code]()), version control to track code changes such as [git](https://git-scm.com/) and its cloud based collaborative components such as [Github](https://github.com) or [Codeberg](https://codeberg.org). The setup of both IDEs is described in @sec-setup.\n\nIt is recommended to start a new project in the RStudio IDE and provide a consistent structure grouping similar objects in folders, e.g. storing data in a `data` folder, your R scripts in the `R` folder etc. You can further select the tracking of used packages using `renv` when creating a new project.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nproject/\n├─ your_project.Rproj\n├─ vignettes/\n│  ├─ your_dynamic_document.Rmd\n├─ data/\n│  ├─ some_data.csv\n├─ R/\n│  ├─ R_scripts.R\n```\n:::\n\n\nFor those familiar with github I provide a [Github template](https://github.com/bluegreen-labs/R_project_template) which you can use when creating a new project on Github. This provides a populated project structure and removes the overhead of making decisions on how to structure a project.\n\n::: {.callout-note}\n## Note\n\nPay close attention to the setup of your project as an intuitive and consistent structure greatly enhances your productivity, reproducibility, replicability within a different context and the overall quality of your work. First and foremost, your project structure, the documentation you write, and the clarity of your work are notes to your future self. Be kind to your future self.\n:::\n\n## Basic R\n\nUnlike many other frameworks for geocomputation, and in particular graphical geographic information system (GIS) such as ArcGIS and QGIS, geocomputation in R is uniquely code oriented. Some basic knowledge of data types, code structure and execution is therefore required. Within R common data structures are vectors, list objects and data frames and tibbles, which are defined as such:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# A numeric vector\nv <- c(1,4,5,6)\n\n# A named list\nl <- list(\n  element_a = \"a\",\n  number_2 = 2\n)\n\n# A data frame (or structured named lists)\ndf <- data.frame(\n  numbers = c(1,3),\n  letters = c(\"a\", \"b\")\n)\n```\n:::\n\n\nData frames in this context represent tabulated data where the content can vary.\n\n### Subsetting and conversions\n\nYou can access data in the above data types by referring to them by index, or in some cases by name. For example,  accessing the 2th element in vector `v` can be accomplished by using `v[2]`. Element 'a' in list `l` can be accessed using \n\n### Basic math\n\n\n\n### Functions\n\n::: {.callout-tip}\n## Exercise sandbox\n\nBelow you can use the in browser R session to execute some basic R commands as shown above. Execute the formatted statement by hitting `Run Code` or alter the content and re-run it.\n\n\n::: {.cell}\n\n```{.webr .cell-code}\n# defines a function printing\n# the last element of a vector\nlast <- function(x) {\n  x[length(x)]\n}\n\n# define a demo vector\nv <- c(1,3,5,7,2)\n\n# apply the defined function\nprint(last(v))\n```\n:::\n\n:::\n\n## Libraries\n\nNot all software components are included in a basic R installation. Additional components can be installed as packages from official R archives (CRAN), or github. A full list of packages used in the rendering of the book and its examples can be found in @sec-bookinfo, where information on the automated installation of all required packages is provided in @sec-setup.\n\nFor example, we can extend the capabilities of base R by installing the `MODISTools` package from the official CRAN archive using: `install.pacakges(\"MODISTools\")`. After a successful installation you can load packages using the `library()` function, as `library(\"MODISTools\")`. Functions as defined within `MODISTools` can then be accessed in scripts or from the command line.\n\nAt times it can be useful to use the `::` notation in calling package functions. The `::` notation allows you to call a function without loading the full package using `library()`. For example, `MODISTools::mt_products()` calls the `mt_products()` function regardless of having loaded `MODISTools` with `library()` beforehand.\n\nThis can be done useful if you only need one particular function, and don't want to load the whole package (as this might have memory/performance implications). Furthermore, the use of `::` makes it explicit what the source package of a particular function is. This can be helpful if packages have functions with the same name, leading to confusion on the source of the function used.\n\nFor installs from external sources we need the `remotes` package. Installing a package directly from a Github location would then be possible using for example `remotes::install_github(\"bluegreen-labs/MODISToosl\")`. Note that packages on Github or elsewhere are note reviewed, and might pose security risks to your system.\n\n## Tidy data\n\nThroughout the book I will structure data using a tidy data approach. Tidy data is a way of structuring data where every row represents a single sample and every row represents a single variable. The tidy data format is a **long** row orientated format. \n\nFIGURE\n\nThis format allows for easier grouped operations. The `dplyr` library is critical in this context as it contains most of the components to manipulate tidy data.\n\nFIGURE\n\n### Tidy data manipulations\n\nAlthough both long or wide data formats have their advantages and drawbacks, the use of long (row oriented) data allows us to use the `dplyr` library to iterate over data quickly and transparently. Conversions to a long format from a wide (column oriented) format are therefore critical throughout this manual.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npivot_longer()\n```\n:::\n\n\n### Tidy data manipulations\n\n\n\n\n### Tidy operations and pipes\n\n- what is a pipe?\n- what are common tidy (rowwise) operations?\n  - group_by()\n  - mutate()\n  - summarize()\n\nLook for figures in cheat sheets (link back to them)\n\n\n::: {.callout-important}\n## Exercise\n\nYour result should look like the plot below\n:::\n\n::: {.callout-tip collapse=\"true\"}\n## Expected Result\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n                mpg cyl  disp  hp drat    wt qsec vs am gear carb\nPorsche 914-2  26.0   4 120.3  91 4.43 2.140 16.7  0  1    5    2\nLotus Europa   30.4   4  95.1 113 3.77 1.513 16.9  1  1    5    2\nFord Pantera L 15.8   8 351.0 264 4.22 3.170 14.5  0  1    5    4\nFerrari Dino   19.7   6 145.0 175 3.62 2.770 15.5  0  1    5    6\nMaserati Bora  15.0   8 301.0 335 3.54 3.570 14.6  0  1    5    8\nVolvo 142E     21.4   4 121.0 109 4.11 2.780 18.6  1  1    4    2\n```\n:::\n:::\n\n:::\n\n## Geocomputation in R\n\nI briefly re-iterate some of the basic principles of geocomputation in R, highlighting two key libraries to read raster and vector data.\n\n### Raster data\n\n\n\n`sf` and `terra`.\n\n\n\n\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}